{"meta":{"title":"Acer Zhou's Blog","subtitle":null,"description":"BE WATER, MY FRIEND","author":"Acer Zhou","url":"http://acerzhou.github.io/Blog","root":"/Blog/"},"pages":[{"title":"404 Not Found：Could not find Page","date":"2021-01-04T12:13:53.463Z","updated":"2021-01-04T12:13:53.463Z","comments":false,"path":"/404.html","permalink":"http://acerzhou.github.io/Blog/404.html","excerpt":"","text":""},{"title":"About Acer Zhou","date":"2021-01-04T11:28:06.143Z","updated":"2021-01-04T11:28:06.143Z","comments":false,"path":"about/index.html","permalink":"http://acerzhou.github.io/Blog/about/index.html","excerpt":"","text":"This is Acer Zhou"},{"title":"Links","date":"2021-01-04T11:28:06.143Z","updated":"2021-01-04T11:28:06.143Z","comments":false,"path":"links/index.html","permalink":"http://acerzhou.github.io/Blog/links/index.html","excerpt":"","text":"Phil’s Blog"},{"title":"Repositories","date":"2021-01-04T11:28:06.143Z","updated":"2021-01-04T11:28:06.143Z","comments":false,"path":"repository/index.html","permalink":"http://acerzhou.github.io/Blog/repository/index.html","excerpt":"","text":""},{"title":"Categories","date":"2021-01-05T01:35:20.025Z","updated":"2021-01-05T01:35:20.025Z","comments":false,"path":"categories/index.html","permalink":"http://acerzhou.github.io/Blog/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-01-05T01:30:39.195Z","updated":"2021-01-05T01:30:39.195Z","comments":false,"path":"tags/index.html","permalink":"http://acerzhou.github.io/Blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Some JavaScript Array Fundementals","slug":"Some-Javascript-Array-Fundementals","date":"2021-02-17T09:34:48.000Z","updated":"2021-02-17T10:51:23.743Z","comments":true,"path":"2021/02/17/Some-Javascript-Array-Fundementals/","link":"","permalink":"http://acerzhou.github.io/Blog/2021/02/17/Some-Javascript-Array-Fundementals/","excerpt":"","text":"Overview and backgroundRecently, I am working on some React components, and it involved some manipulation on arrays. In C#, there is powerful Linq giving you pretty much all tools you are going to need. It is powerful and readable. However, Javascript is a different story. I am going to summarise some basic JavaScript Array manipulations. Audience People having some basic knowledge Haven’t doing manipulation and transformation using JavaScript a lot Some useful JavaScript Array FunctionsMost common used - push, pop1234567const array &#x3D; [1, 2, 3, 4, 5];&#x2F;&#x2F; add 6 at the endconst lengthOfArray &#x3D; array.push(6); &#x2F;&#x2F; array -&gt; [1, 2, 3, 4, 5, 6], lengthOfArray -&gt; 6&#x2F;&#x2F; get the last elementconst lastElement &#x3D; array.pop(); &#x2F;&#x2F; array -&gt; [1, 2, 3, 4, 5], lastElement -&gt; 6 Opposite to push &amp; pop - shift, unshift1234567const array &#x3D; [1, 2, 3, 4, 5];&#x2F;&#x2F; add 6 at the beginningconst lengthOfArray &#x3D; array.unshift(6); &#x2F;&#x2F; array -&gt; [6, 1, 2, 3, 4, 5], lengthOfArray -&gt; 6&#x2F;&#x2F; get the first elementconst firstElement &#x3D; array.shift(); &#x2F;&#x2F; array -&gt; [1, 2, 3, 4, 5], firstElement -&gt; 6 Filter the array - filterThis method is similar to Linq Where. However, you can manipulate the element in filter function. 12345678910111213141516const array &#x3D; [ &#123; key: &#39;a&#39;, value: 123 &#125;, &#123; key: &#39;b&#39;, value: 50 &#125;]const elementValueGreaterThen50 &#x3D; array.filter(element &#x3D;&gt; element.value &gt; 50);&#x2F;&#x2F; elementValueGreaterThen50 -&gt; [&#123;key: &#39;a&#39;, value: 123&#125;]const elementKeyIsB &#x3D; array.filter(element &#x3D;&gt; element.key &#x3D;&#x3D;&#x3D; &#39;b&#39;);&#x2F;&#x2F; elementKeyIsB -&gt; [&#123;key: &#39;b&#39;, value: 50&#125;] Create a new array based on current array - mapMap is sort of similar with Linq Select, but it more powerful, as it can add attribute to the element. 12345678910111213141516171819202122232425const array &#x3D; [ &#123; key: &#39;a&#39;, value: 123 &#125;, &#123; key: &#39;b&#39;, value: 50 &#125;]const arrayOfKeys &#x3D; array.map(a &#x3D;&gt; a.key);&#x2F;&#x2F; arrayOfKeys -&gt; [ &#39;a&#39;, &#39;b&#39; ]const arrayOnlyWithKey &#x3D; array.map(a &#x3D;&gt; &#123;return &#123;key: a.key&#125;&#125;);&#x2F;&#x2F; arrayOnlyWithKey -&gt; [ &#123; key: &#39;a&#39; &#125;, &#123; key: &#39;b&#39; &#125; ]const arrayOnlyWithKeyAndTag &#x3D; array.map(a &#x3D;&gt; &#123; return &#123; key: a.key, tag: a.key + a.value &#125;&#125;);&#x2F;&#x2F; arrayOnlyWithKeyAndTag -&gt; [ &#123; key: &#39;a&#39;, tag: &#39;a123&#39; &#125;, &#123; key: &#39;b&#39;, tag: &#39;b50&#39; &#125; ] Loop Through the array - forEach12345678910111213const array &#x3D; [ &#123; key: &#39;a&#39;, value: 123 &#125;, &#123; key: &#39;b&#39;, value: 50 &#125;]array.forEach(a &#x3D;&gt; console.log(a.key));&#x2F;&#x2F; print a b Powerful and interesting tool - reduce123456789101112131415161718192021222324252627282930313233343536373839const result &#x3D; [0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) &#x3D;&gt; &#123; return accumulator + currentValue&#125;, 10) &#x2F;&#x2F; 10 is initial value&#x2F;&#x2F; result -&gt; 20const array &#x3D; [ &#123; key: &#39;a&#39;, values: [&#39;value a-1&#39;] &#125;, &#123; key: &#39;b&#39;, values: [&#39;value b-1&#39;] &#125;, &#123; key: &#39;a&#39;, values: [&#39;value a-2&#39;] &#125;, &#123; key: &#39;b&#39;, values: [&#39;value b-2&#39;] &#125;]const newArray &#x3D; array.reduce((acc, cur) &#x3D;&gt; &#123; const indexOfExistingItem &#x3D; acc.map(a &#x3D;&gt; a.key).indexOf(cur.key); if(indexOfExistingItem !&#x3D;&#x3D; -1)&#123; acc[indexOfExistingItem].values &#x3D; acc[indexOfExistingItem].values.concat(cur.values); &#125;else&#123; acc.push(cur); &#125; return acc;&#125;,[]);&#x2F;&#x2F; newArray -&gt; [ &#123; key: &#39;a&#39;, values: [ &#39;value a-1&#39;, &#39;value a-2&#39; ] &#125;, &#123; key: &#39;b&#39;, values: [ &#39;value b-1&#39;, &#39;value b-2&#39; ] &#125; ]&#x2F;&#x2F; This example is using reduce to combine element with same keyss","categories":[{"name":"Tech","slug":"Tech","permalink":"http://acerzhou.github.io/Blog/categories/Tech/"},{"name":"Programming","slug":"Tech/Programming","permalink":"http://acerzhou.github.io/Blog/categories/Tech/Programming/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://acerzhou.github.io/Blog/tags/JavaScript/"},{"name":"Basics","slug":"Basics","permalink":"http://acerzhou.github.io/Blog/tags/Basics/"}]},{"title":"Recursion","slug":"Recursion","date":"2021-02-09T10:17:25.000Z","updated":"2021-02-10T12:00:54.547Z","comments":true,"path":"2021/02/09/Recursion/","link":"","permalink":"http://acerzhou.github.io/Blog/2021/02/09/Recursion/","excerpt":"","text":"Background and AudiencesIn the early this week, I have encounter a problem that can solved by recursion. However, it took me a while to get it solved. In this post, I am going to get couple questions on recursion problem, and practice writing some code. Audiences Having basic understanding on Programming Haven’t familiar recursion problem RecursionIn computer science, recursion is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem. (From WikiPedia) PracticesExercise OneGiven n as positive integer, print n!. 1234567891011const n &#x3D; 3;const calculate &#x3D; (n) &#x3D;&gt; &#123; if(n &lt;&#x3D; 1)&#123; return 1; &#125; return calculate(n-1)*n&#125;console.log(calculate(n)); Exercise TwoGiven 0，1，1，2，3，5，8，13，21，34，55，89，144…, print number in position n. 1234567891011const n &#x3D; 9;const calculate &#x3D; (n) &#x3D;&gt; &#123; if(n &lt;&#x3D; 1)&#123; return n; &#125; return calculate(n-1) + calculate(n-2)&#125;console.log(calculate(n)); Exercise ThreeGiven n = 12345, print 54321, reverse print n. 1234567891011const n &#x3D; 12345;const calculate &#x3D; (n) &#x3D;&gt; &#123; console.log(n%10); if(n &gt; 10 )&#123; calculate(Math.floor(n&#x2F;10)); &#125;&#125;calculate(n); Exercise FourTower of Hanoi, given x, y, z poles, there are n (n &gt; 1) plates on pole x. Goal is moving all plates on pole y. Each time, only move one plate big plates can’t be on small plates. 123456789101112const n &#x3D; 3const from &#x3D; &#39;x&#39;, tmp &#x3D; &#39;y&#39;, to &#x3D; &#39;z&#39;const hanoi &#x3D; (n, from, tmp, to) &#x3D;&gt; &#123; if(n &gt; 0)&#123; hanoi(n-1, from, to, tmp); console.log(&#96;take $&#123;n&#125; from $&#123;from&#125; to $&#123;to&#125;&#96;); hanoi(n-1, tmp, from, to); &#125;&#125;hanoi(n, from, tmp, to);","categories":[{"name":"Tech","slug":"Tech","permalink":"http://acerzhou.github.io/Blog/categories/Tech/"},{"name":"Programming","slug":"Tech/Programming","permalink":"http://acerzhou.github.io/Blog/categories/Tech/Programming/"}],"tags":[{"name":"Recursion","slug":"Recursion","permalink":"http://acerzhou.github.io/Blog/tags/Recursion/"},{"name":"Programming","slug":"Programming","permalink":"http://acerzhou.github.io/Blog/tags/Programming/"},{"name":"Basic","slug":"Basic","permalink":"http://acerzhou.github.io/Blog/tags/Basic/"}]},{"title":"Git Advanced Skill - Git Rebase","slug":"Git-Advanced-Skill-Git-Rebase","date":"2021-01-30T06:57:19.000Z","updated":"2021-01-31T11:24:17.914Z","comments":true,"path":"2021/01/30/Git-Advanced-Skill-Git-Rebase/","link":"","permalink":"http://acerzhou.github.io/Blog/2021/01/30/Git-Advanced-Skill-Git-Rebase/","excerpt":"","text":"Overview and Required KnowledgeI have been working with Git for a while. As a developer, version control is one of the key daily workflows. However, git rebase is always something that I have heard of it, but never get a chance to deeply understand and applied in my daily working. In this post, I am going to explore git rebase, and summary how to use it. Required Knowledge:Git Basic Understanding Audience who may get most out of this post: Have been working with Git for a while Haven’t use/know git rebase in details Introduction to Git RebaseGit Rebase When shouldn’t use Rebase and when should use RebaseNever Rebase on Shared BranchGit Rebase will rewrite part of branch history. If those commits are already on origin, and someone rebase those commits and push to origin, other people who are on the same branch will have diverged. It is going to be super confused, and other people may lose their commits / codes when try to solve the diverge. Best Rebase time - before push to originOne of the best times to use Git Rebase is doing rebase just before push anything into origin. If we treat anything origin should be seriously correct and it is the final source of truth. Before pushing to origin, we need to make sure what push into origin should be correct and right formatted. Git Rebase is a good tool to use that time. In this case, there are four commits (c6, c7, c8, c9).c6 adds two files (file1 &amp; file2).c7 does an update on file1.c8 revert the code change of c7.c9 remove the file2. Those four commits at the end, only add file1 into the repos. We would like to have more clear and simple history record in the whole repo history. So we can use Git Rebase to change the history to 1 commit (add file1). And push the origin. How to use RebaseWhen use Git Rebase, there is always a base branch. If a branch (e.g. feature/test) has an origin (origin/feature/test), when run command 1git rebase [-i] the branch will base on origin branch. Otherwise, you can use 1git rebase &lt;branch-name&gt; [-i] to rebase again certain branch. -i Parameter-i means “interactive” rebase, that developer can edit before the rebase start, and control the behaviour. Without “-i” parameter, Git will apply rebase automatically, and get human interaction when it is necessary (getting into some troubles 😁). When running git rebase -i will have following page shows 12345678910111213141516171819202122pick 4ad9704 hellopick xxxxxxx commit 2pick xxxxxxy commit 3# Rebase 8d7e9b7..4ad9704 onto 8d7e9b7 (1 command)## Commands:# p, pick &#x3D; use commit# r, reword &#x3D; use commit, but edit the commit message# e, edit &#x3D; use commit, but stop for amending# s, squash &#x3D; use commit, but meld into previous commit# f, fixup &#x3D; like &quot;squash&quot;, but discard this commit&#39;s log message# x, exec &#x3D; run command (the rest of the line) using shell# d, drop &#x3D; remove commit## These lines can be re-ordered; they are executed from top to bottom.## If you remove a line here THAT COMMIT WILL BE LOST.## However, if you remove everything, the rebase will be aborted.## Note that empty commits are commented out In this part, you can choose behaviour of git rebase.Using editor, change the pick at the beginning of each commit, and choose the action for the commit. p(pick) - it will keep the commit as original - do this when you are happy with the commit r(reword) - when git rebase apply to this commit, it will give you opportunity to update commit message - do this when you are ok with the commit file change, but want to make better commit message e(edit) - when git rebase apply to this commit, it will give you opportunity to amend commit (either message or commit content) - do this when you want to do some update on the commit (require know how to do amend) s(squash) - the commit will be combined into previous one, and message will be put into previous commit message - do this when you want to combined two or more commits f(fixup) - similar to “s”, but the commit message of this commit will be discard - do this when you want to remove the give message for this one x(exec) - run some shell script - I haven’t play this one, may update this later d(drop) - remove the commit (same to remove the line) Note: the order can be changed as well. Then rebase will apply it from to top. If there is any change or conflicts, it will stop and ask developers input to progress. ExampleTake the previous example: 1234c6 adds two files (file1 &amp; file2). c7 does an update on file1. c8 revert the code change of c7.c9 remove the file2. I can do 1234r c6 adds two files (file1 &amp; file2). d c7 does an update on file1. d c8 revert the code change of c7.f c9 remove the file2. When c6 is applied, I can reword commit message to “Add file1” This will give a clean git history. How to practiceI will recommand to practice this skill by creating an empty repo. Then create a file, and commit some content, writing couple of more commits, and play with rebase. It is going to be helpful to see the simple change, and ordered commits. In real environment, it is could be more complex, but hard to see how rebase working. SummaryThis post summarised some understanding on Git Rebase. I haven’t covered Git Rebase –onto, maybe will cover it in future post. Hope everyone can get some understanding on this process. Please leave any comments and thoughts. Thanks for reading. ReferenceAtlassian Git RebaseGit Merge vs Git RebaseGit BooksGit RebasingGit Rebase and Git Rebase –onto","categories":[{"name":"Tech","slug":"Tech","permalink":"http://acerzhou.github.io/Blog/categories/Tech/"},{"name":"Git","slug":"Tech/Git","permalink":"http://acerzhou.github.io/Blog/categories/Tech/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://acerzhou.github.io/Blog/tags/git/"},{"name":"gitrebase","slug":"gitrebase","permalink":"http://acerzhou.github.io/Blog/tags/gitrebase/"}]},{"title":"First Week in New Company","slug":"First-Week-in-New-Company","date":"2021-01-26T00:36:04.000Z","updated":"2021-01-26T04:15:49.430Z","comments":true,"path":"2021/01/26/First-Week-in-New-Company/","link":"","permalink":"http://acerzhou.github.io/Blog/2021/01/26/First-Week-in-New-Company/","excerpt":"","text":"First Week ExperienceI just finished my first week in the new place and I would like to write down some thinking on the first week. For new company onboarding, I have a dedicated Trello board for myself tracking things (so far I really enjoyed it). I am still setting up my work laptops, building workflow and habits. I did ship my first PR into prod😁, a really simple change in the website. It was a good learning process to understand from updating code, submitting PR, PR reviewing, deployed into Prod and checking the result. There is good documentation within the team and everyone is welling to jump into a call helping me through to the end. For me, the past week has been fabulous. After staying in a place for more then 3 years, lots of things become habits. It is so normal for me that I am not questioning or exploring any more. Switching environment gives me the opportunity that I can review the past years, reflecting on it, breaking old habits and rethink new ideas. The best thing, in the new working place, is always meet people, people coming from different background and having different experiences. It feels like starting a RPG game. There are many place is covered under the fog of war and wait to be explored. I need to find out information, tools, tasks and finish work. I get the opportunity to chat with different people, and start to build new relationships. First week is also different on the emotion side. People are naturally behave differently when they get into a new environment. It is actually a good time to observe myself in the case. Through the week, I can feel my egos and some existing pattern of thinking and actions. It is a great opportunity to learn to drop the ego and get to the ground to learn new way of thinking and working. The rest of this post is what my thinking in different perspectives when onboarding in a new place. Hopefully it is helpful for both employees and employers and smooth the onboarding experience and processes. What Do We Care As DevelopersAs developers, we are working with so many tools, systems, codebases, and environments everyday. Code ReposCode repositories are the all final truth. PipelineThe maturity of pipeline could represent how a company is adapting to modern software development. How is release managed How is CI/CD set up How is test set up in the pipeline What is the strategy to rollback Environments (PROD / STAGING / UAT / DEV) Is the Environment on Cloud or on Prem Is there any dashboard monitoring PROD Is there any alerts on PROD issue, and how it looks like What is STAGING, UAT, and DEV environment How could developer verify his/her change before it is going to PROD DatabaseDatabase could be managed by other team, and not all devs could access the database directly. It is really depends on the size and workflow within the company. What type of database is used in Environment (SQL or Non SQL) What is database (MSSQL / MySQL / Mongo / DynamoDB etc.) What is the tool team has been using to connect to database BoardsWhether it is Scrum or KanBan, boards is a place where the work starts. What is the tool used to track progress of the work What is the flow and how each stage has been defined Wiki / DocumentationGood documentation could save time for both new starters and other teammates. Documentation should contains “how we work” and “what are our values”. Those are going to help new starters understand the standards of the team. Accessing documentation from business &amp; design team could also help devs understand context, background and decisions about projects, and code bases. Dev Machine Set upThose who would perfect their work must first sharpen their tools. (I am planning write another post later the year on this topic) Internal ToolsThere are always some internal tools to use within the company for staff doing different jobs. Quick access those tools and master how to use it could help improve new starters’ productivity. Communication ToolsIt is always about communication. What is the IM used within the company What is the email used Important thing, do we have a email signature ? 😆 Beyond TechHowever, only writing good code is not enough to be a good developers. Git Commit Message And PR DescriptionsGood written git commit message and PR descriptions could save others time on understanding the change within the code, and give feedbacks on the changes. What Is Good Commit MessagesThis really depends on teams’ preference, and if there is any existing conventions. The following just as reference: How to Write a Git Commit Message How to Write a Good Commit Message Conventional Commits Write Joyous Git Commit Messages Understanding Semantic Commit Messages Using Git and Angular What Is Good PR DescriptionSame with commit message, please check if there is any convention or template has been used. Some reference: Pull Request Etiquette The Many Benefits of Good Pull Request Descriptions Writing A Great Pull Requst Description Documentation &amp; TicketDocumentation and board tickets is no doubt a critical part of software development. Learning how to maintaining documentation and creating tickets could help devs get into work. Some reference on writing documentations Should Developers Write Documentation? Yes, and Here’s Why The one skill every Software Developer should master How to write proper Software Documentation Introduce YourselfIt always takes time to know each other when a person joins in a new place. There is not much shortcut. However, I think what my current new place has a trick is quite good. In the team wiki, every team member writes a profile page containing What others could expected from you What you expect on others What do you like chat about (or what is your hobby)So far, I like this way of introducing yourself. I would like to observe it more and see how this could help for team knowing each other. Business UnderstandingIt is a good process that using the company’s product as a user and go through all process. Without the experience using the product as end user, developers could make wrong decision during the development process. It also gives time for developers to learn the language used in company and communicate with other team member easily. Security, Security, SecuritySince the first day of IT, security is born with the industry. For company, security breaching could damage the reputations and get involved in law suits.For public company, it could also impact share prices. As an IT professional, thinking about security should be always concern before doing anything. Learning and obey new company’s security policy is always top priority. What Do We Care As EmployeesAs employees, we have our workplace obligations and rights. PayrollGetting paid is surely an important part of the working. Understanding payment cycle, payment amount and payment process is critical for everyone in the workforce. People do make mistakes, it is our responsibility to make sure that we get paid and the right number. Annual Leave, Sick &amp; Care LeaveIn Australia, a full time employee should get 20 days annual leave and 10 days sick and care’s leave. We should read documents on this carefully and aware of any process to applying those leaves, and if there is any requirements (ie. doctors note for sick leave or 1 month before the annual leave). ProbationProbation is the time for employers measuring our performance and if we are fit into the culture. It is also a time that we get to know our team and working environment. It is more like a dating period before the marriage (legal obligation). It is ok to end in the probation with different reasons. Learning through the journey is the most important thing. Fair workFair Work Website Employee Assistance ProgramEmployee Assistance Professional Association of Australia What Do We Care As HumanAccording to Maslow’s Hierarchy of Needs, our demands are not only about our safety needs. Making ImpactFor sure one of our reasons to come to work everyday is getting paid. But there could be something beyond salary. The work we have done is a contribution to the society and the world. We are surely not like the Superheroes saving the world and thousands of lives in the movies. But our work could make our customers or client happy and sad. Company valuesWhen the company values aligned with our personal believes, it is going to make our day to day work a bit different. Company is like human beings. Those companies truly believe good values would make good impact to this world. Those values are the core principles underlining our daily behaviour. In SummaryIt is really long post, and each heading could be expanding into a topic. There are so much to read and think about the whole journey. Thanks for reading, and please leave any comments or thoughts.","categories":[{"name":"Profession","slug":"Profession","permalink":"http://acerzhou.github.io/Blog/categories/Profession/"},{"name":"Working","slug":"Profession/Working","permalink":"http://acerzhou.github.io/Blog/categories/Profession/Working/"}],"tags":[{"name":"working","slug":"working","permalink":"http://acerzhou.github.io/Blog/tags/working/"},{"name":"firstweek","slug":"firstweek","permalink":"http://acerzhou.github.io/Blog/tags/firstweek/"},{"name":"onboarding","slug":"onboarding","permalink":"http://acerzhou.github.io/Blog/tags/onboarding/"}]},{"title":"Some Reflections on My Job Hunting","slug":"Some-Reflections-on-My-Job-Hunting","date":"2021-01-16T12:03:20.000Z","updated":"2021-01-16T12:03:20.916Z","comments":true,"path":"2021/01/16/Some-Reflections-on-My-Job-Hunting/","link":"","permalink":"http://acerzhou.github.io/Blog/2021/01/16/Some-Reflections-on-My-Job-Hunting/","excerpt":"","text":"This post is about some reflections on my job hunting experience in past couple of months. Audience who may get most out of this post: People looking for jobs such as Software Developer or similar role People having 2 - 4 years experience in IT industry People haven’t been looking for jobs for a while, or first time looking for a job Lesson No 1 - Don’t trust recruitersLast August, a recruiter reached out to me on LinkedIn, and told me there was a good opportunity in another retailer in Australia. Their team just got funding and would like to expand their IT Engineering team. I have heard good comments about the company, and its office is also happened to located near place I am living.So I decide to give her a go. However, she is gone for good after first chat. No messages, no emails and no phone calls, like this person never showed in my life. Later December, she somehow showed again, and provided me another opportunity, and never mentioned our previous chat. I politely turned down on her, as I just don’t trust her any more. My friend also told me that is pretty normal for recruiters, and don’t trust them. So I have learnt that. I don’t mean all recruiters are bad, but just be careful dealing with them. Looking for companies having healthy environment and good cultureTo choose my next step, first of all, I want a company having a good culture and environment. It is such a common sense that could be ignored during the job hunting process. I have been really lucky to be in a good team environment for the past almost 4 years. It taught me that a good culture could help you grow beyond what you can imagine. I also get some friends who got into bad company and have unpleasant experience (even involved lawyers at the end). So please choose your next company carefully. However, it is definitely not easy to know what the company cultures looks like. My experience is ask the people who know. Ask your colleagues or friends, if they have heard the company (both in good or bad) or if they have any friends working there. I consulted different people at the time, my manager, and my friends who has been industry for a while. They provided me a list of companies which they have been there or they know it would be a good next step for me. Another way is using GlassDoor. It has a section about company reviews (like reviews in Amazon under the product). It could give you some insight on how previous employees thinking on the company. I also use a trick to estimate how the company cultures like. I browsed the people’s profile on LinkedIn within the company, if there are people staying there for a long time (5 - 10 yrs), it could suggest that the company have a good culture, otherwise, people won’t stay there for that long. See what’s available on the market, Resume &amp; ApplySeek and LinkedIn are two websites I have been using heavily when searching jobs at the time. I prefer LinkedIn over Seek as it is more like a social network. Personally, I am a fan of LinkedIn “Easy Apply” function in the jobs. I also got a month free LinkedIn Premium, so I use that one as well. LinkedIn Premium also gives you some data on how you rank in the applicants based on your profile. It is also matching your profile and job ads. For Resume, it is always a difficult thing for me who have English as a second language. I only get limited vocabulary to describe the job I have done. What I tried my best was describe what I have done during the project, and give the technology name and also showing the impact. If you want to get better chance to get in, I would also suggest you make purposely change on your resume to fit job based on their ads. Most of time, their job ads list the technology and experience they are looking for. Making sure those key words shows in your resume could be helpful for resume selection.I got rejected 3 times in resume selection. I believe using resume service could help, especially those one on one service helping improve your resume. If I am applying Google or Microsoft, I will definitely get some service to shape my resume. So next time. HR or Manager InterviewFrom my experience, if your resume is fit what the company is looking for, you will receive a email or a phone call after you submit your application(could be next day or could until weeks later).Different company has different way to do that.So far, my best experience is I get an email with a link that I can choose an available time to book a meeting on Zoom. Then we just meet in the time and have a chat. A phone call and lock down a meeting time is also good enough. The worst way is using email back and forth and trying to find an available time on both side. Generally, the first round of interview is done through a HR(big company) or a manager(small company). Their purpose is to get a further step knowing you, such as who you are, what was your experience, and what was the tech you have been working on.For HRs, they are particularly looking for some tech key words depends on the company technical stack. As in recently years, AWS, Azure, micro service, event driven, TDD, RESTful APIs are the most popular one.For managers, you potentially dealing with some people with dev experience. Since they knows technology, for dev role, it is more easy to communicate on projects you have done. They also will ask what you expecting salary, please say a number rather then a range. It is going to reduce the negotiation when offer is out. Based on the role they are recruiting, there is a range, as long as yours is fit into the range, you will get a tick on that. If there is no drama, they will give you a technical challenge after the this. It could be through email or a web portal. Technical ChallengeMost company says the challenge should be done in a week. If they don’t say a strict deadline, but they would normally check progress in a week time. And most of them would be happy to extend if you haven’t got enough time to finish it, as long as you communicate it. I got 4 technical challenges this time, and none of them are related to algorithm. Two of them are .Net RESTful APIs, and one is a .Net Console with some requirement business logic, and one is write a console app with some requirement in any language you choose. I passed 3 out of 4 of them. The one failed was due to I didn’t write proper unit tests. The company was really nice and had a email explain the standard they were looking for. It is a great way to learn and understand how they measure quality code. However, not all unit tests are required. As another company, they don’t have TDD culture in the organisation, so they didn’t make it necessary. I would suggestion write as much as unit tests you can, it is definitely help. To submit the code challenge, it is actually not easy. Most email provider doesn’t like Zip file, and they reject it because of security reason. What I did is uploading the zip into Google Drive, and send email reference the file link, and give the permission of viewing the file. This only works when you use your Gmail account to communicate with the company. I assume Outlook should be fine, as they have OneDrive. But I am not sure other vendor. Those code challenge some times is a simplified problem the team are working on or something you may do if you join the company. It is not always the case, but you could use it a way to inspect what the work looks like in the company. Technical Challenge Pairing and ReviewAfter team reviewing your solution, if they are happy what you have done, they will reach you to schedule another session. Generally the session is with some senior developers from the team. After introduction, they may ask you go through your code and explain some assumption &amp; decision you made during the coding. They may have some questions and also some requirements to ask you do in the pairing. It is a session to see you reaction during code review and pair programming. Personally, I feel great in those sessions. It is like doing a code review with someone you don’t know, and they always can show you some ideas and how they solving problems and coding. These are something you aren’t having in your normal day to day job. Culture and Social Skill InterviewThis interview generally carried by a general manager with a lead. It is more to understand what is your value, how will you work with team to solve problems, and whether you will fit into the team culture. They would ask questions about what was the team structure you were working like, and if you have any experience on solving conflicts. They may also ask about how do you ensure code quality, and how much do you know Agile. Offer and Accepting OfferIf company think you are a good fit for the company both in culture and tech wise, they will provide you offer at this time. Generally, they will give you 24 hours to decide accept or not. If you are not happy about the package, you can also negotiate, and see if there is any space of moving. Be GratefulAs a person working in tech industry, and I can get a job in this COVID period. I am really appreciate and grateful for all of this. I believe what we get paid today in IT industry today, it is not because of who we are, but because we are in this industry. We are just lucky get into an up-trending industry. Please stand in awe. Some Other ThingsJust don’t be surprise if anything happens during the interview, and don’t assume it is always going to be good. Accept the reality, learn from it and carry on. I have an interesting experience this time, one of my interviewers having really heavy accent, it is really take me lots of effort to get the pairing session going. Just don’t be afraid ask questions or make them explain to you. If interviewer asks any questions that you never know, don’t be hurry, take your time and think properly and answer it. SummaryIn summary, above are some my reflections on this job hunting experience. Wish this post can give you some help. All the best, and wish you get good offers if you are looking for new opportunity.","categories":[{"name":"Profession","slug":"Profession","permalink":"http://acerzhou.github.io/Blog/categories/Profession/"},{"name":"Interview","slug":"Profession/Interview","permalink":"http://acerzhou.github.io/Blog/categories/Profession/Interview/"}],"tags":[{"name":"interview","slug":"interview","permalink":"http://acerzhou.github.io/Blog/tags/interview/"},{"name":"jobhunting","slug":"jobhunting","permalink":"http://acerzhou.github.io/Blog/tags/jobhunting/"}]},{"title":"VS Code Plugins","slug":"VS-Code-Plugins","date":"2021-01-05T05:13:59.000Z","updated":"2021-01-08T11:56:18.256Z","comments":true,"path":"2021/01/05/VS-Code-Plugins/","link":"","permalink":"http://acerzhou.github.io/Blog/2021/01/05/VS-Code-Plugins/","excerpt":"","text":"VS Code is one of the best and most popular editors in today’s world. From my understanding, it becomes outstanding from tools in IT due to following reasons: Lightweight Cross Platform (Windows, Mac, Linux) High quality and multiple plugins Clean and simple UI In this post, I put some plugins I have used in my day to day job, and improve my productivity. Coding and Scripting HelperTabNineI have been used TabNine for a while, and it is become part of my working flow now. It is quite powerful and give good insight and improve productivity. However, it is still a bit different from XCode and Visual Studio suggestion. I think it is good enough and worth to try. Code RunnerCode Runner is a plugin I recently found. I feel it is really helpful when I want to try some code snippet. Previously, I always use online code playground to test out my idea or assumption. With this plugin, I can simply use the VS Code to do all the work. It is supper easy, set the language you want to run. And simple select the code, right click -&gt; select “Run Code” Or Use Ctrl+Alt+N, the result will shows in output. PerformanceImport CostImport Cost is a plugin helping you understand the size of bundle you imported in your JS file. file-sizefile-size is a plugin showing current file size. It is helpful when you want to know the size of file or strings. GitGitLensGitLens is one of the best plugins for Git in VS Code. Git is the most popular and common tools devs using today. GitLens really helps you understand what happens within the code. I really like it can give you hint on line by line on the author and date change of the code. Documentation and CommentsCode Spell CheckerCode Spell Checker is a plugin help spelling in code and document. Markdown All in OneMarkdown All in One is a plugin for Markdown. Markdown is a good and simple language used to create documents. Markdown All in One is a plugin helping writing Markdown in VS Code. BookmarksBookmarks is a plugin that you can set bookmark in file, so that you can come back at any time. 😉 Better CommentsWant you code comments more colourful ? Better Comments is here. It having highlight, alert, todo and query to present on comments. Todo TreeTodo Tree is a plugin to manage TODO comments in code repo. It is a good habit to resolve all TODO before building the PR. :) NavigationCamel Case NavigationCamel Case is one of popular way to naming variables and functions within programming. I used CTRL+-&gt; a lot to quick navigating throw the code. However, I sometime feel difficult to go into the word to change, as VS Code treat the camel case word as whole word. Using Camel Case Navigation, I can go into the middle of the word and make the change using CTRL+-&gt;. Feeling Awesome. Text and Data ProcessingJSON Parse &amp; StringifyToday, we are heavily working with Non-SQL DB and RESTful API, JSON is one of the most common data structure we are dealing with everyday. JSON Parse &amp; Stringify is a plugin to stringify or parse JSON data. Using online free tools, it has the risk to expose sensitive information within data. This plugin avoid the situation that you need some manipulation on JSON and JSON string. vscode-base64Base64 encoding and decoding is another translating we used a lot as developers. For example, HTTP Base Authentication requires both username and password need to be encoded to base64. vscode-base64 is a plugin that can do the job. jwt-decoderJSON Web Tokens(JWT) is used to represent claims between two parities. jwt-decoder can decode the JWT, and give more info on the token real content. Other ToolingRemote DevelopmentRemote Development is something that you can visual the ambition of MS for VS Code. As we are moving towards Cloud today, software development is also moving to Cloud. I am using this feature to work on this post which is located in my WSL system, and it is perfectly feeling like working in the same system. Highly recommended. REST ClientREST Client, a replacement for POST Man. I don’t know if anyone having a bit trouble using POST Man some time, this is a plugin that can work with APIs. The pro of this is easier to manage multiple endpoints and easily share if the team is using it. I am still trying to find a way to integrate this one into my workflow. Setting SyncSetting Sync is a plugin that can be used to share and maintain the settings of VS Code, I haven’t used this one yet, but I am going to try and find out if it is good. ThemesVSCode Great IconVSCode Great Icon, icon shows in explorer. I like this one with the simplicity. AyuAyu is a theme I am currently using. I feel dark mode making me exhausted after a while working and reading. I am using Ayu light, and so far, I am enjoy it.","categories":[{"name":"Resource","slug":"Resource","permalink":"http://acerzhou.github.io/Blog/categories/Resource/"},{"name":"VSCode","slug":"Resource/VSCode","permalink":"http://acerzhou.github.io/Blog/categories/Resource/VSCode/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"http://acerzhou.github.io/Blog/tags/vscode/"},{"name":"plugin","slug":"plugin","permalink":"http://acerzhou.github.io/Blog/tags/plugin/"},{"name":"productivity","slug":"productivity","permalink":"http://acerzhou.github.io/Blog/tags/productivity/"}]},{"title":"Websites","slug":"websites","date":"2021-01-05T05:06:18.000Z","updated":"2021-01-09T00:59:35.172Z","comments":true,"path":"2021/01/05/websites/","link":"","permalink":"http://acerzhou.github.io/Blog/2021/01/05/websites/","excerpt":"","text":"LearningFree Code CampGate’s Note Martin Fowler 12 Factor AppAgile Manifesto Code ChallengeAdvent of CodeLeetCode ResourcesFree For Dev 中文博客(Chinese Blog)扯氮集阮一峰的博客 Gaming ArtGGAC","categories":[{"name":"Resource","slug":"Resource","permalink":"http://acerzhou.github.io/Blog/categories/Resource/"}],"tags":[{"name":"weblinks","slug":"weblinks","permalink":"http://acerzhou.github.io/Blog/tags/weblinks/"},{"name":"blogs","slug":"blogs","permalink":"http://acerzhou.github.io/Blog/tags/blogs/"}]},{"title":"2021 - First Post","slug":"2021","date":"2021-01-04T11:31:29.000Z","updated":"2021-01-04T11:58:52.413Z","comments":true,"path":"2021/01/04/2021/","link":"","permalink":"http://acerzhou.github.io/Blog/2021/01/04/2021/","excerpt":"","text":"G’Day Mate. This is Acer Zhou, welcome to my personal blog space Acer’s Note. I have been thinking to create a blog for a long long time, but never commit to it. This time, I’d like to give it a try and put some effort here, to create a space recording and sharing the journey I have been through. Currently, for this site, I am going to focus on but not limited to following content: Diary &amp; Casual thinking Tech &amp; Programming Some Useful Resources I hope I can take this on, and make it become a small conner on the Internet.And most important, hope you enjoy it. :) Let’s rock, 2021 !","categories":[{"name":"Diary","slug":"Diary","permalink":"http://acerzhou.github.io/Blog/categories/Diary/"}],"tags":[{"name":"2021","slug":"2021","permalink":"http://acerzhou.github.io/Blog/tags/2021/"},{"name":"diary","slug":"diary","permalink":"http://acerzhou.github.io/Blog/tags/diary/"},{"name":"firstPostInYear","slug":"firstPostInYear","permalink":"http://acerzhou.github.io/Blog/tags/firstPostInYear/"}]},{"title":"Hello World From Acer's Note","slug":"hello-world","date":"2021-01-04T11:28:06.133Z","updated":"2021-01-04T11:28:06.133Z","comments":true,"path":"2021/01/04/hello-world/","link":"","permalink":"http://acerzhou.github.io/Blog/2021/01/04/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Tech","slug":"Tech","permalink":"http://acerzhou.github.io/Blog/categories/Tech/"},{"name":"Programming","slug":"Tech/Programming","permalink":"http://acerzhou.github.io/Blog/categories/Tech/Programming/"},{"name":"Git","slug":"Tech/Git","permalink":"http://acerzhou.github.io/Blog/categories/Tech/Git/"},{"name":"Profession","slug":"Profession","permalink":"http://acerzhou.github.io/Blog/categories/Profession/"},{"name":"Working","slug":"Profession/Working","permalink":"http://acerzhou.github.io/Blog/categories/Profession/Working/"},{"name":"Interview","slug":"Profession/Interview","permalink":"http://acerzhou.github.io/Blog/categories/Profession/Interview/"},{"name":"Resource","slug":"Resource","permalink":"http://acerzhou.github.io/Blog/categories/Resource/"},{"name":"VSCode","slug":"Resource/VSCode","permalink":"http://acerzhou.github.io/Blog/categories/Resource/VSCode/"},{"name":"Diary","slug":"Diary","permalink":"http://acerzhou.github.io/Blog/categories/Diary/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://acerzhou.github.io/Blog/tags/JavaScript/"},{"name":"Basics","slug":"Basics","permalink":"http://acerzhou.github.io/Blog/tags/Basics/"},{"name":"Recursion","slug":"Recursion","permalink":"http://acerzhou.github.io/Blog/tags/Recursion/"},{"name":"Programming","slug":"Programming","permalink":"http://acerzhou.github.io/Blog/tags/Programming/"},{"name":"Basic","slug":"Basic","permalink":"http://acerzhou.github.io/Blog/tags/Basic/"},{"name":"git","slug":"git","permalink":"http://acerzhou.github.io/Blog/tags/git/"},{"name":"gitrebase","slug":"gitrebase","permalink":"http://acerzhou.github.io/Blog/tags/gitrebase/"},{"name":"working","slug":"working","permalink":"http://acerzhou.github.io/Blog/tags/working/"},{"name":"firstweek","slug":"firstweek","permalink":"http://acerzhou.github.io/Blog/tags/firstweek/"},{"name":"onboarding","slug":"onboarding","permalink":"http://acerzhou.github.io/Blog/tags/onboarding/"},{"name":"interview","slug":"interview","permalink":"http://acerzhou.github.io/Blog/tags/interview/"},{"name":"jobhunting","slug":"jobhunting","permalink":"http://acerzhou.github.io/Blog/tags/jobhunting/"},{"name":"vscode","slug":"vscode","permalink":"http://acerzhou.github.io/Blog/tags/vscode/"},{"name":"plugin","slug":"plugin","permalink":"http://acerzhou.github.io/Blog/tags/plugin/"},{"name":"productivity","slug":"productivity","permalink":"http://acerzhou.github.io/Blog/tags/productivity/"},{"name":"weblinks","slug":"weblinks","permalink":"http://acerzhou.github.io/Blog/tags/weblinks/"},{"name":"blogs","slug":"blogs","permalink":"http://acerzhou.github.io/Blog/tags/blogs/"},{"name":"2021","slug":"2021","permalink":"http://acerzhou.github.io/Blog/tags/2021/"},{"name":"diary","slug":"diary","permalink":"http://acerzhou.github.io/Blog/tags/diary/"},{"name":"firstPostInYear","slug":"firstPostInYear","permalink":"http://acerzhou.github.io/Blog/tags/firstPostInYear/"}]}